#!/usr/bin/env ruby

require 'pcap_tools'
require 'optparse'

options = {
  :mode => :http,
}

OptionParser.new do |opts|
  opts.banner = "Usage: pcap_tools_http [options] pcap_files"

  opts.on("--no-body", "Do not display body") do
    options[:no_body] = true
  end

  opts.on("--mode [MODE]", [:http, :tcp, :only_parse], "parsing mode") do |m|
    options[:mode] = m
  end

end.parse!

data = ARGV.map{|f| puts "Loading #{f}"; PcapTools::Parser::load_file(f)}

puts "Mode : #{options[:mode]}"

puts "Frames extracted : #{data.flatten.size}"

if options[:mode] == :only_parse
  exit 0
end

tcps = PcapTools::extract_tcp_streams(data)

puts "Tcp streams extracted : #{tcps.size}"
puts

def format_time t
  "#{t} #{t.nsec / 1000}"
end

if options[:mode] == :http
  tcps.each do |tcp|
    PcapTools::extract_http_calls(tcp).each do |req, resp|
      puts ">>>> #{req["pcap-src"]}:#{req["pcap-src-port"]} > #{req["pcap-dst"]}:#{req["pcap-dst-port"]} #{format_time req.time}"
      puts "#{req.method} #{req.path}"
      req.each_capitalized_name.reject{|x| x =~ /^Pcap/ }.each do |x|
        puts "#{x}: #{req[x]}"
      end
      puts
      puts req.body unless options[:no_body]
      if resp
        puts "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< #{format_time resp.time}"
        puts "#{resp.code} #{resp.message}"
        resp.each_capitalized_name.reject{|x| x =~ /^Pcap/ }.each do |x|
          puts "#{x}: #{resp[x]}"
        end
        puts
        puts resp.body unless options[:no_body]
      else
        puts "No response in pcap file"
      end
      puts
    end
  end
  exit 0
end

if options[:mode] == :tcp
  tcps.each do |tcp|
    puts "<<<< new connection >>>>"
    tcp.each do |packet|
      type = packet[:type] == :out ? ">>>>" : "<<<<<"
      puts "#{type} #{packet[:from]}:#{packet[:from_port]} > #{packet[:to]}:#{packet[:to_port]}, size #{packet[:data].size}  #{format_time packet[:time]}"
      puts packet[:data]
      puts
    end
  end
  exit 0
end